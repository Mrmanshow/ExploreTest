@using Explore.Core.Infrastructure;
@using Explore.Web.Framework;
@using Explore.Web.Framework.UI;

@model Explore.Web.Models.Game.GameLabaOrderListModel

@{
    var defaultGridPageSize = EngineContext.Current.Resolve<Explore.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<Explore.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;

    //page title
    ViewBag.Title = T("Admin.Game.LabaRoute").Text;
    //active menu item (system name)
    Html.SetActiveMenuItemSystemName("Game Laba Route");
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="content-header clearfix">
        <h1 class="pull-left">
            @T("Admin.Game.LabaOrder")
        </h1>
    </div>

    <div class="content">
        <div class="form-horizontal">
            <div class="panel-group">
                <div class="panel panel-default panel-search">
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-5">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.ExploreLabelFor(model => model.BeginDate)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.ExploreEditorFor(model => model.BeginDate)
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.ExploreLabelFor(model => model.EndDate)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.ExploreEditorFor(model => model.EndDate)
                                    </div>
                                </div>
                            </div>


                            <div class="col-md-7">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.ExploreLabelFor(model => model.LabaTypeId)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.ExploreDropDownList("LabaTypeId", Model.AvasliableLabaTypes)
                                    </div>
                                </div>
                            </div>
                        </div>



                        <div class="row">
                            <div class="col-md-7 col-md-offset-5">
                                <button type="button" id="search-orders" class="btn btn-primary btn-search">
                                    <i class="fa fa-search"></i>
                                    @T("Admin.Common.Search")
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="panel panel-default">
                    <div class="panel-body">
                        <div id="banners-grid"></div>

                        <script>
                            $(document).ready(function() {
                                $("#banners-grid").kendoGrid({
                                    dataSource: {
                                        type: "json",
                                        transport: {
                                            read: {
                                                url: "@Html.Raw(Url.Action("OrderList", "Laba"))",
                                                type: "POST",
                                                dataType: "json",
                                                data: additionalData
                                            }
                                        },
                                        schema: {
                                            data: "Data",
                                            total: "Total",
                                            errors: "Errors"
                                        },
                                        requestEnd: function (e) {
                                            if (e.type == "read") {
                                                var response = e.response;
                                                if (response) {
                                                    //store extra data
                                                    reportAggregates = e.response["ExtraData"];
                                                }
                                            }
                                        },
                                        error: function(e) {
                                            display_kendoui_grid_error(e);
                                            // Cancel the changes
                                            this.cancelChanges();
                                        },
                                        pageSize: @(defaultGridPageSize),
                                        serverPaging: true,
                                        serverFiltering: true,
                                        serverSorting: true
                                    },
                                    pageable: {
                                        refresh: true,
                                        pageSizes: [@(gridPageSizes)],
                                        @Html.Partial("_GridPagerMessages")
                                    },
                                    editable: {
                                        confirmation: "@T("Admin.Common.DeleteConfirmation")",
                                        mode: "inline"
                                    },
                                    scrollable: false,
                                    dataBound: onDataBound,
                                    columns: [
                                        {
                                            field: "Id",
                                            title: "@T("Admin.LabaOrder.Fields.Id")",
                                            width: 50
                                        },
                                        {
                                            field: "UserName",
                                            title: "@T("Admin.LabaOrder.Fields.UserName")",
                                            width: 50
                                        },{
                                            field: "Amount",
                                            title: "@T("Admin.LabaOrder.Fields.Amount")",
                                            width: 50
                                        },
                                        {
                                            field: "WinAmount",
                                            title: "@T("Admin.LabaOrder.Fields.WinAmount")",
                                            width: 50
                                        },{
                                            field: "Position",
                                            title: "@T("Admin.LabaOrder.Fields.Position")",
                                            width: 50
                                        },
                                        {
                                            field: "FreeOrderId",
                                            title: "@T("Admin.LabaOrder.Fields.FreeOrderId")",
                                            width: 50,
                                        },
                                        {
                                            field: "FreeCount",
                                            title: "@T("Admin.LabaOrder.Fields.FreeCount")",
                                            width: 50,
                                        },
                                        {
                                            field: "CreateTime",
                                            title: "@T("Admin.LabaOrder.Fields.CreateTime")",
                                            width: 50,
                                            type: "date",
                                            format: "{0:yyyy-MM-dd HH:mm:ss}"
                                        }
                                    ]
                                } );
                            });
                        </script>

                        <script type="text/javascript">
                            var selectedIds = [];
                            var reportAggregates = "";

                            $(document).ready(function () {
                                $("[name='LabaTypeId']").val(@Model.LabaTypeId)

                                //search button
                                $('#search-orders').click(function () {
                                    //search
                                    var grid = $('#banners-grid').data('kendoGrid');
                                    grid.dataSource.page(1); //new search. Set page size to 1
                                    //grid.dataSource.read(); we already loaded the grid above using "page" function
                                    //clear selected checkboxes
                                    $('.checkboxGroups').attr('checked', false).change();
                                    selectedIds = [];
                                    return false;
                                });

                                $('#mastercheckbox').click(function () {
                                    $('.checkboxGroups').attr('checked', $(this).is(':checked')).change();
                                });

                                //wire up checkboxes.
                                $('#banners-grid').on('change', 'input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]', function (e) {
                                    var $check = $(this);
                                    if ($check.is(":checked") == true) {
                                        var checked = jQuery.inArray($check.val(), selectedIds);
                                        if (checked == -1) {
                                            //add id to selectedIds.
                                            selectedIds.push($check.val());
                                        }
                                    }
                                    else {
                                        var checked = jQuery.inArray($check.val(), selectedIds);
                                        if (checked > -1) {
                                            //remove id from selectedIds.
                                            selectedIds = $.grep(selectedIds, function (item, index) {
                                                return item != $check.val();
                                            });
                                        }
                                    }
                                    updateMasterCheckbox();
                                });
                            });

                            function edit(id) {
                                location.href = "EditRoute/"+id+"?labaType=" + $('#@Html.FieldIdFor(model => model.LabaTypeId)').val();
                            }

                            function additionalData() {
                                var data = {
                                    LabaTypeId: $('#@Html.FieldIdFor(model => model.LabaTypeId)').val(),
                                    BeginDate: $('#@Html.FieldIdFor(model => model.BeginDate)').val(),
                                    EndDate: $('#@Html.FieldIdFor(model => model.EndDate)').val()
                                };
                                addAntiForgeryToken(data);
                                return data;
                            }

                            function onDataBound(e) {
                                $('#banners-grid input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]').each(function () {
                                    var currentId = $(this).val();
                                    var checked = jQuery.inArray(currentId, selectedIds);
                                    //set checked based on if current checkbox's value is in selectedIds.
                                    $(this).attr('checked', checked > -1);
                                });

                                updateMasterCheckbox();
                            }

                            function updateMasterCheckbox() {
                                var numChkBoxes = $('#banners-grid input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]').length;
                                var numChkBoxesChecked = $('#banners-grid input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]:checked').length;
                                $('#mastercheckbox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
                            }

                            //delete selected
                            $('#delete-selected').click(function(e) {
                                e.preventDefault();

                                var postData = {
                                    selectedIds: selectedIds
                                };
                                addAntiForgeryToken(postData);

                                $.ajax({
                                    cache: false,
                                    type: "POST",
                                    url: "@(Url.Action("RouteDeleteSelected", "Laba"))",
                                    data: postData,
                                    complete: function(data) {
                                        //reload grid
                                        var grid = $('#banners-grid').data('kendoGrid');
                                        grid.dataSource.read();
                                    },
                                    error: function(xhr, ajaxOptions, thrownError) {
                                        alert(thrownError);
                                    },
                                    traditional: true
                                });
                                return false;
                            });
                        </script>
                    </div>
                </div>
            </div>
        </div>
    </div>
}